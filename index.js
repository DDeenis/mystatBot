/*jshint globalstrict: true*/

'use strict';

const mystat = require('./mystat');

const {
    Telegraf,
    session,
    Stage
} = require('telegraf');

const WizardScene = require('telegraf/scenes/wizard');

const {
    MenuTemplate,
    MenuMiddleware,
    deleteMenuFromContext,
    editMenuOnContext
} = require('telegraf-inline-menu');

const Enumerable = require('linq');

const mock = require('mysql2');
const repository = require('./database');

repository.checkDatabase();

const botToken = process.env.MYSTAT_BOT_TOKEN;

const bot = new Telegraf(botToken);

async function getUserData(chatId)
{
    const users = await repository.getUserByChat(chatId);

    const userData = users[0];

    return {
        username: userData.mystatLogin,
        password: userData.mystatPassword
    };
}

let username = '';
let password = '';
let name = '';
let currentResponseText = '';

let profile;

/////////////////// START LOGIN SCENE ///////////////////

const loginScene = new WizardScene(
    'login',
    ctx => {
        ctx.reply("üì≤ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –æ—Ç mystat");

        return ctx.wizard.next();
    },
    ctx => {
        username = ctx.message.text;

        ctx.reply("üîë –¢–µ–ø–µ—Ä—å –æ–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –æ—Ç mystat");

        return ctx.wizard.next();
    },
    async ctx => {
        password = ctx.message.text;

        ctx.reply("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");

        // mystat.setLoginParameters(username, password);

        try {
            // await setUserName();

            // await mystat.setLoginParameters(username, password);

            profile = await mystat.loadProfileInfo({username, password});

            await repository.createUser(username, password, ctx.chat.id);

            username = '';
            password = '';

            await ctx.reply("üîì –í—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω");

            mainMenuMiddleware.replyToContext(ctx);
        } catch (error) {
            console.log(error);

            ctx.reply("üîí –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.");
        }

        return ctx.scene.leave();
    }
);

/////////////////// END LOGIN SCENE ///////////////////

/////////////////// START LOGIN MENU ///////////////////

const loginMenuTemplate = new MenuTemplate(ctx => `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${ctx.from.first_name}`);

loginMenuTemplate.interact('–í–æ–π—Ç–∏ –≤ mystat', 'unique', {
    do: async (ctx) => {
        ctx.scene.enter('login');

        return false;
    }
});

const loginMiddleware = new MenuMiddleware('/login/', loginMenuTemplate);

/////////////////// END LOGIN MENU ///////////////////

/////////////////// START MAIN MENU ///////////////////

const mainMenuTemplate = new MenuTemplate(ctx => `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ`);

mainMenuTemplate.interact('üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'todaySchedule', {
    do: async (ctx) => {
        // await checkLoginCredentials(ctx.chat.id);
        const userData = await getUserData(ctx.chat.id);

        let todaySchedule;

        try {
            todaySchedule = await mystat.getScheduleByDate(userData);
        } catch (error) {
            await ctx.reply('üö´ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞');

            console.log(error);

            return false;
        }

        if (todaySchedule.length <= 0) {
            await ctx.reply('üéâ –£ –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–∞—Ä');

            return false;
        }

        let scheduleFormatted = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n';

        for (const scheduleEntry of todaySchedule) {
            scheduleFormatted += `‚úèÔ∏è –ü—Ä–µ–¥–º–µ—Ç: ${scheduleEntry.subject_name}\n`;
            scheduleFormatted += `üí° –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${scheduleEntry.teacher_name}\n`;
            scheduleFormatted += `üóù –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${scheduleEntry.room_name}\n`;
            scheduleFormatted += `‚è∞ –í—Ä–µ–º—è: ${scheduleEntry.started_at} \- ${scheduleEntry.finished_at}\n`;
            scheduleFormatted += '\n';
        }

        await replyWithUniversalMenu(ctx, scheduleFormatted);

        return false;
    }
});

// –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
mainMenuTemplate.interact('üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', 'tomorrowSchedule', {
    do: async (ctx) => {
        // await checkLoginCredentials(ctx.chat.id);
        const userData = await getUserData(ctx.chat.id);

        let tomorrowSchedule;

        try {
            tomorrowSchedule = await mystat.getScheduleByDateTomorrow(userData);
        } catch (error) {
            await ctx.reply('üö´ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞');

            console.log(error);

            return false;
        }

        if (tomorrowSchedule.length <= 0) {
            await ctx.reply('üéâ –£ –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–∞—Ä');

            return false;
        }

        let scheduleFormatted = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n';

        for (const scheduleEntry of tomorrowSchedule) {
            scheduleFormatted += `‚úèÔ∏è –ü—Ä–µ–¥–º–µ—Ç: ${scheduleEntry.subject_name}\n`;
            scheduleFormatted += `üí° –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${scheduleEntry.teacher_name}\n`;
            scheduleFormatted += `üóù –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${scheduleEntry.room_name}\n`;
            scheduleFormatted += `‚è∞ –í—Ä–µ–º—è: ${scheduleEntry.started_at} \- ${scheduleEntry.finished_at}\n`;
            scheduleFormatted += '\n';
        }

        await replyWithUniversalMenu(ctx, scheduleFormatted);

        return false;
    }
});

// remove or re-work
mainMenuTemplate.interact('üóì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü', 'monthSchedule', {
    do: async (ctx) => {
        // await checkLoginCredentials(ctx.chat.id);
        const userData = await getUserData(ctx.chat.id);

        let monthSchedule;

        try {
            monthSchedule = await mystat.getMonthSchedule(userData);
        } catch (error) {
            await ctx.reply('üö´ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞');

            console.log(error);

            return false;
        }

        if (monthSchedule.length <= 0) {
            await ctx.reply('üéâ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —É –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä');

            return false;
        }

        monthSchedule = Enumerable.from(monthSchedule).orderBy((element) => element.date).groupBy((element) => element.date);

        function getButtonTitle(element) {
            return `${element.key().split('-')[2]}`;
        }

        function getFormattedString(element) {
            let formattedString = '';
            
            for (const scheduleEntry of element) {
                formattedString += `üìÖ –î–∞—Ç–∞: ${scheduleEntry.date}\n`;
                formattedString += `‚úèÔ∏è –ü—Ä–µ–¥–º–µ—Ç: ${scheduleEntry.subject_name}\n`;
                formattedString += `üí° –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${scheduleEntry.teacher_name}\n`;
                formattedString += `üóù –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${scheduleEntry.room_name}\n`;
                formattedString += `‚è∞ –í—Ä–µ–º—è: ${scheduleEntry.started_at} \- ${scheduleEntry.finished_at}\n`;
                formattedString += '\n';
            }

            return formattedString;
        }

        function getActionString(element) {
            return `${element.key()} - ${Math.random() * 1000}`;
        }

        await replyWithListedMenu(ctx, monthSchedule, '–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ', '/month-schedule/', getButtonTitle, getFormattedString, getActionString);

        return false;
    }
});

mainMenuTemplate.interact('‚úâÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', 'homework', {
    do: async (ctx) => {
        // await checkLoginCredentials(ctx.chat.id);
        // const userData = await getUserData(ctx.chat.id);

        let homeworkList;

        function getButtonTitle(element) {
            return element.name_spec;
        }

        function getActionString(element) {
            return `show homework ${element.creation_time + Math.random() * 1000}`;
        }

        const homeworkSelectTemplate = new MenuTemplate(ctx => '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è');

        homeworkSelectTemplate.interact('üì® –¢–µ–∫—É—â–∏–µ', 'show current homeworks', {
            do: async ctx => {
                const userData = await getUserData(ctx.chat.id);

                try {
                    homeworkList = await mystat.getHomeworkList(userData, 3);
                } catch (error) {
                    await ctx.reply('üö´ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞');

                    console.log(error);

                    return false;
                }

                if (homeworkList === undefined || homeworkList.length <= 0) {
                    await ctx.reply("üéâ –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π");

                    return false;
                }

                function getFormattedString(element) {
                    let formattedString = '';

                    formattedString += `‚úèÔ∏è –ü—Ä–µ–¥–º–µ—Ç: ${element.name_spec}\n`;
                    formattedString += `üìñ –¢–µ–º–∞: ${element.theme}\n`;
                    formattedString += `üí° –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${element.fio_teach}\n`;
                    formattedString += `üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: ${element.creation_time}\n`;
                    formattedString += `‚ùï –°–¥–∞—Ç—å –¥–æ: ${element.completion_time}\n`;
                    formattedString += `‚ùóÔ∏è –ò—Å—Ç–µ–∫–∞–µ—Ç: ${element.overdue_time}\n`;
                    formattedString += `‚úíÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${element.comment}\n`;
                    formattedString += `üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${element.file_path}\n`;

                    formattedString += '\n';

                    return formattedString;
                }

                await replyWithListedMenu(ctx, homeworkList, '–¢–µ–∫—É—â–∏–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', '/current-homework/', getButtonTitle, getFormattedString, getActionString);

                return false;
            }
        });

        homeworkSelectTemplate.interact('üì© –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ', 'show checked homeworks', {
            do: async ctx => {
                const userData = await getUserData(ctx.chat.id);

                try {
                    homeworkList = await mystat.getHomeworkList(userData, 1);
                } catch (error) {
                    await ctx.reply('üö´ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞');

                    console.log(error);

                    return false;
                }

                if (homeworkList === undefined || homeworkList.length <= 0) {
                    await ctx.reply("‚ùï –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π");

                    return false;
                }

                function getFormattedString(element) {
                    let formattedString = '';

                    formattedString += `‚úèÔ∏è –ü—Ä–µ–¥–º–µ—Ç: ${element.name_spec}\n`;
                    formattedString += `üìñ –¢–µ–º–∞: ${element.theme}\n`;
                    formattedString += `üí° –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${element.fio_teach}\n`;
                    formattedString += `üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: ${element.creation_time}\n`;
                    formattedString += `‚ùï –°–¥–∞—Ç—å –¥–æ: ${element.completion_time}\n`;
                    formattedString += `‚úíÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${element.comment}\n`;
                    formattedString += `üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${element.file_path}\n`;
                    formattedString += `üìÇ –ü—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É: ${element.homework_stud.file_path}\n`;
                    formattedString += `‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ: ${element.homework_stud.creation_time}\n`;
                    formattedString += `üéâ –û—Ü–µ–Ω–∫–∞: ${element.homework_stud.mark}\n`;

                    if (element.homework_comment !== null) {
                        formattedString += `üñä –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: ${element.homework_comment.text_comment}\n`;
                    }

                    if (element.homework_comment !== null && element.homework_comment.attachment_path !== null) {
                        formattedString += `üìå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${element.homework_comment.attachment_path}\n`;
                    }

                    formattedString += '\n';

                    return formattedString;
                }

                await replyWithListedMenu(ctx, homeworkList, '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', '/checked-homework/', getButtonTitle, getFormattedString, getActionString);

                return false;
            }
        });

        homeworkSelectTemplate.interact('üì• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ', 'show uploaded homeworks', {
            do: async ctx => {
                const userData = await getUserData(ctx.chat.id);

                try {
                    homeworkList = await mystat.getHomeworkList(userData, 2);
                } catch (error) {
                    await ctx.reply('üö´ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞');

                    console.log(error);

                    return false;
                }

                if (homeworkList === undefined || homeworkList.length <= 0) {
                    await ctx.reply("‚ùï –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π");

                    return false;
                }

                function getFormattedString(element) {
                    let formattedString = '';

                    formattedString += `‚úèÔ∏è –ü—Ä–µ–¥–º–µ—Ç: ${element.name_spec}\n`;
                    formattedString += `üìñ –¢–µ–º–∞: ${element.theme}\n`;
                    formattedString += `üí° –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${element.fio_teach}\n`;
                    formattedString += `üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: ${element.creation_time}\n`;
                    formattedString += `‚ùï –°–¥–∞—Ç—å –¥–æ: ${element.completion_time}\n`;
                    formattedString += `‚úíÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${element.comment}\n`;
                    formattedString += `üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${element.file_path}\n`;
                    formattedString += `üì• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ: ${element.creation_time}\n`;

                    formattedString += '\n';

                    return formattedString;
                }

                await replyWithListedMenu(ctx, homeworkList, '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', '/uploaded-homework/', getButtonTitle, getFormattedString, getActionString);

                return false;
            }
        });

        homeworkSelectTemplate.interact('üóë –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ', 'show overdue homeworks', {
            do: async ctx => {
                const userData = await getUserData(ctx.chat.id);

                try {
                    homeworkList = await mystat.getHomeworkList(userData, 0);
                } catch (error) {
                    await ctx.reply('üö´ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞');

                    console.log(error);

                    return false;
                }

                if (homeworkList === undefined || homeworkList.length <= 0) {
                    await ctx.reply("üéâ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π");

                    return false;
                }

                function getFormattedString(element) {
                    let formattedString = '';

                    formattedString += `‚úèÔ∏è –ü—Ä–µ–¥–º–µ—Ç: ${element.name_spec}\n`;
                    formattedString += `üìñ –¢–µ–º–∞: ${element.theme}\n`;
                    formattedString += `üí° –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${element.fio_teach}\n`;
                    formattedString += `üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: ${element.creation_time}\n`;
                    formattedString += `‚ùï –°–¥–∞—Ç—å –¥–æ: ${element.completion_time}\n`;
                    formattedString += `‚úíÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${element.comment}\n`;
                    formattedString += `üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${element.file_path}\n`;
                    formattedString += `üóë –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: ${element.overdue_time}\n`;
                    formattedString += `‚ö∞Ô∏è –ê–≤—Ç–æ–æ—Ü–µ–Ω–∫–∞: ${element.homework_stud.auto_mark}\n`;

                    formattedString += '\n';

                    return formattedString;
                }

                await replyWithListedMenu(ctx, homeworkList, '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', '/overdue-homework/', getButtonTitle, getFormattedString, getActionString);

                return false;
            }
        });

        homeworkSelectTemplate.navigate('‚¨ÖÔ∏è –í –º–µ–Ω—é', '/main-menu/');

        const homeworkSelectMiddleware = new MenuMiddleware('/homework-select-menu/', homeworkSelectTemplate);

        bot.use(homeworkSelectMiddleware);

        try {
            await deleteMenuFromContext(ctx);
        } catch (error) {
            console.log(error);
        }

        homeworkSelectMiddleware.replyToContext(ctx);

        return false;
    }
});

mainMenuTemplate.interact('üïØ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã', 'futureExams', {
    do: async (ctx) => {
        // await checkLoginCredentials(ctx.chat.id);
        const userData = await getUserData(ctx.chat.id);

        let futureExams;

        try {
            futureExams = await mystat.getFutureExams(userData);
        } catch (error) {
            await ctx.reply('üö´ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–æ–≤ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞');

            console.log(error);

            return false;
        }

        if (futureExams.length <= 0) {
            await ctx.reply("üéâ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤");

            return false;
        }

        let examsFormatted = '–í–∞—à–∏ —ç–∫–∑–∞–º–µ–Ω—ã\n\n';

        for (const exam of futureExams) {
            examsFormatted += `‚úèÔ∏è –ü—Ä–µ–¥–º–µ—Ç: ${exam.spec}\n`;
            examsFormatted += `‚è∞ –î–∞—Ç–∞: ${exam.date}\n`;
            examsFormatted += '\n';
        }

        await replyWithUniversalMenu(ctx, examsFormatted);

        return false;
    }
});

mainMenuTemplate.interact('‚ö∞Ô∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —ç–∫–∑–∞–º–µ–Ω—ã', 'allExams', {
    do: async (ctx) => {
        // await checkLoginCredentials(ctx.chat.id);
        const userData = await getUserData(ctx.chat.id);

        let allExams;

        try {
            allExams = await mystat.getExams(userData);
        } catch (error) {
            await ctx.reply('üö´ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞');

            console.log(error);

            return false;
        }

        if (allExams.length <= 0) {
            await ctx.reply("üéâ –£ –≤–∞—Å –Ω–µ—Ç —ç–∫–∑–∞–º–µ–Ω–æ–≤");

            return false;
        }

        function getButtonTitle(element) {
            return element.spec;
        }

        function getFormattedString(element) {
            let formattedString = '';

            formattedString += `‚úèÔ∏è –ü—Ä–µ–¥–º–µ—Ç: ${element.spec}\n`;
            formattedString += `‚è∞ –î–∞—Ç–∞: ${element.date}\n`;
            formattedString += `üí∞ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${element.teacher}\n`;
            formattedString += `üïØ –û—Ü–µ–Ω–∫–∞: ${element.mark}\n`;
            formattedString += '\n';

            return formattedString;
        }

        function getActionString(element) {
            return `show exam ${Math.random() * Math.random()}`;
        }

        await replyWithListedMenu(ctx, allExams, '–í–∞—à–∏ —ç–∫–∑–∞–º–µ–Ω—ã', '/all-exams/', getButtonTitle, getFormattedString, getActionString);

        return false;
    }
});

mainMenuTemplate.interact('üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏', 'news', {
    do: async (ctx) => {
        // await checkLoginCredentials(ctx.chat.id);
        const userData = await getUserData(ctx.chat.id);

        let news;

        try {
            news = await mystat.getNews(userData);
        } catch (error) {
            await ctx.reply('üö´ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞');

            console.log(error);

            return false;
        }

        if (news.length <= 0) {
            await ctx.reply("‚ùî –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π");

            return false;
        }

        function getButtonTitle(element) {
            return element.theme;
        }

        async function getFormattedString(element) {
            let formattedString = '';

            formattedString += `‚úèÔ∏è –¢–µ–º–∞: ${element.theme}\n`;
            formattedString += `üìÖ –î–∞—Ç–∞: ${element.time}\n`;
            formattedString += `\n`;
            formattedString += (await mystat.getNewsDetails(userData, element.id_bbs)).text_bbs.replace(/<[^>]*>?/gm, '\n').replace(/(\n\n\n\n)/gm, "\n\n").replace(/(\n\n\n)/gm, "\n").replace(/(\n\n)/gm, "\n");
            formattedString += `\n`;

            return formattedString;
        }

        function getActionString(element) {
            return `show news ${element.id_bbs}`;
        }

        await replyWithListedMenu(ctx, news, '–ù–æ–≤–æ—Å—Ç–∏', '/news-menu/', getButtonTitle, getFormattedString, getActionString);

        return false;
    }
});

mainMenuTemplate.interact('‚õè –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã', 'groupList', {
    do: async (ctx) => {
        // await checkLoginCredentials(ctx.chat.id);
        const userData = await getUserData(ctx.chat.id);

        let groupList;

        try {
            groupList = await mystat.getGroupLeaders(userData);
        } catch (error) {
            await ctx.reply('üö´ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞');

            console.log(error);

            return false;
        }

        if (groupList.length <= 0) {
            await ctx.reply("üéâ –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ");

            return false;
        }

        function getButtonTitle(element) {
            return `${element.full_name} - ${element.position}`;
        }

        function getFormattedString(element) {
            let formattedString = '';

            formattedString += `üìù –ò–º—è: ${element.full_name}\n`;
            formattedString += `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: ${element.amount}\n`;
            formattedString += `üì± –§–æ—Ç–æ: ${element.photo_path}\n`;
            formattedString += `üîë ID: ${element.id}\n`;

            return formattedString;
        }

        function getActionString(element) {
            return `show student ${element.id}`;
        }

        await replyWithListedMenu(ctx, groupList, '–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã', '/group-menu/', getButtonTitle, getFormattedString, getActionString);

        return false;
    }
});

mainMenuTemplate.interact('üñ® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ', 'aboutMe', {
    do: async ctx => {
        // await checkLoginCredentials(ctx.chat.id);
        const userData = await getUserData(ctx.chat.id);

        let settings;

        try {
            profile = await mystat.loadProfileInfo(userData);
            settings = await mystat.getUserSettings(userData);
        } catch (error) {
            await ctx.reply('üö´ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞');

            console.log(error);

            return false;
        }

        let profileInfo = ``;

        profileInfo += `üìù –§–ò–û: ${profile.full_name}\n`;
        profileInfo += `üß≠ –ì—Ä—É–ø–ø–∞: ${profile.group_name}\n`;
        profileInfo += `üñ• –ü–æ—Ç–æ–∫: ${profile.stream_name}\n`;
        profileInfo += `üîç –§–æ—Ç–æ: ${profile.photo}\n`;
        profileInfo += `üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç: ${profile.gaming_points[1].points}\n`;
        profileInfo += `üíé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤: ${profile.gaming_points[0].points}\n`;
        profileInfo += `üìà –í—Å–µ–≥–æ –ø–æ–∏–Ω—Ç–æ–≤: ${profile.gaming_points[0].points + profile.gaming_points[1].points}\n`;
        profileInfo += `üí° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${profile.achieves_count}\n`;
        profileInfo += `‚öôÔ∏è –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ñ–∏–ª—è: ${profile.level}\n`;
        profileInfo += `üì° –ü–æ—á—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Azure: ${settings.azure_login}\n`;
        profileInfo += `ü™ì –ü–æ—á—Ç–∞: ${settings.email}\n`;
        profileInfo += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${settings.phones[0].phone_number}\n`;

        await replyWithUniversalMenu(ctx, profileInfo);

        return false;
    }
});

mainMenuTemplate.interact('üè≥Ô∏è –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', 'logout', {
    do: async ctx => {
        username = '';
        password = '';

        // await mystat.setLoginParameters(username, password);

        await repository.deleteUser(ctx.chat.id);

        await deleteMenuFromContext(ctx);

        await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞');

        return false;
    }
});

const mainMenuMiddleware = new MenuMiddleware('/main-menu/', mainMenuTemplate);

/////////////////// END MAIN MENU ///////////////////

// menu for arrays
// getButtonTitle and getFormattedString and getActionString are functions that accept 1 argument (element of array dataList)

async function replyWithListedMenu(ctx, dataList, menuTitle, path, getButtonTitle, getFormattedString, getActionString) {
    const listedMenuTemplate = new MenuTemplate(ctx => menuTitle);

    for (const element of dataList) {
        listedMenuTemplate.interact(await getButtonTitle(element), await getActionString(element), {
            do: async ctx => {
                const formattedString = await getFormattedString(element);

                await replyWithUniversalMenu(ctx, formattedString);

                return false;
            }
        });
    }

    listedMenuTemplate.navigate('‚¨ÖÔ∏è –í –º–µ–Ω—é', '/main-menu/');

    const listedMenuMiddleware = new MenuMiddleware(path, listedMenuTemplate);

    bot.use(listedMenuMiddleware);

    try {
        // await deleteMenuFromContext(ctx);
        await editMenuOnContext(listedMenuTemplate, ctx, path);
    } catch (error) {
        await listedMenuMiddleware.replyToContext(ctx);

        console.log(error);
    }

    // await listedMenuMiddleware.replyToContext(ctx);

    return false;
}

/////////////////// START UNIVERSAL MENU ///////////////////

const universalMenuTemplate = new MenuTemplate(_ => `${currentResponseText}`);

universalMenuTemplate.navigate('‚¨ÖÔ∏è –í –º–µ–Ω—é', '/main-menu/');

const universalMenuMiddleware = new MenuMiddleware('/universal-menu/', universalMenuTemplate);

async function replyWithUniversalMenu(ctx, content) {
    try {
        await deleteMenuFromContext(ctx);
        // await editMenuOnContext(universalMenuTemplate, ctx, '/universal-menu/');
    } catch (error) {
        console.log(error);
    }

    currentResponseText = content;

    universalMenuMiddleware.replyToContext(ctx);
}

/////////////////// END UNIVERSAL MENU ///////////////////

const stage = new Stage([loginScene], {
    //default: 'main',
    ttl: 360
});

// middleware

bot.use(session());
bot.use(stage.middleware());
bot.use(loginMiddleware);
bot.use(mainMenuMiddleware);
bot.use(universalMenuMiddleware);

// bot actions

bot.command('start', ctx => {
    console.log(`Recieved message from ${ctx.chat.first_name}`);
    loginMiddleware.replyToContext(ctx);
});
bot.command('login', ctx => loginMiddleware.replyToContext(ctx));

bot.command('menu', ctx => mainMenuMiddleware.replyToContext(ctx));

const crashCommand = process.env.CRASH_COMMAND;
bot.command(crashCommand, ctx => mainMenuMiddleware.replyToContext(42));

bot.command('help', ctx => ctx.reply('–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/login - –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç\n/menu - –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ'));

// start bot

bot.launch();